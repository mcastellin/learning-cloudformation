AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates a Jenkins master node in the specified VPC

Parameters:
  KeyPairName:
    Type: String
    Description: What is the name of the keypair to use for ssh access?
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: What is the Vpc ID where the instance should be deployed?
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of subnets for Jenkins nodes deployment
  AssignPublicIp:
    Type: String
    Description: Assign a public IP to the created instances?
    Default: false
    AllowedValues:
      - true
      - false
  MasterInstanceType:
    Type: String
    Description: Which instance type to use for Jenkins master node?
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.large
  LinuxAmi:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Read the name of the latest linuxAmiId from SSM
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  ApplicationPort:
    Type: Number
    Description: Which is the Jenkins application port for the master node?
    Default: 8080
  CreateWorkersSecGroup:
    Type: String
    Description: Should security groups be created to wire worker nodes to this master instance?
    Default: false
    AllowedValues:
      - true
      - false
  AdminPort:
    Type: Number
    Description: Which port should be used for administration?
    Default: 22
  ExternalIp:
    Type: String
    Description: Which is the Cidr block for external admin access?
    Default: 0.0.0.0/0
    AllowedPattern: ^([0-9]{1,3}\.){3}([0-9]{1,3})\/[0-9]{1,2}$

Conditions:
  PublicIpAssigned: !Equals [!Ref AssignPublicIp, "true"]
  CreateWorkersSecGroup: !Equals [!Ref CreateWorkersSecGroup, "true"]

Resources:
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: jenkins-lb-sg
      GroupDescription: The security group for Jenkins application load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  JenkinsMasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: jenkins-master-sg
      GroupDescription: A security group for the Jenkins master instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
          SourceSecurityGroupId: !Ref LBSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref AdminPort
          ToPort: !Ref AdminPort
          CidrIp: !Ref ExternalIp
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  SecGroupIngressFromWorkers:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateWorkersSecGroup
    Properties:
      GroupId: !Ref JenkinsMasterSecurityGroup
      Description: On condition accept all traffic from worker nodes
      IpProtocol: "-1"
      FromPort: 0
      ToPort: 0
      SourceSecurityGroupId: !Ref JenkinsWorkersSecGroup

  JenkinsWorkersSecGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateWorkersSecGroup
    Properties:
      GroupName: jenkins-workers-sg
      GroupDescription: A security group to allow Jenkins workers to communicate with master
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          SourceSecurityGroupId: !Ref JenkinsMasterSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref AdminPort
          ToPort: !Ref AdminPort
          CidrIp: !Ref ExternalIp
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  JenkinsMasterInstance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - AssociatePublicIpAddress: !Ref AssignPublicIp
          DeviceIndex: "0"
          SubnetId: !Select [0, !Ref SubnetIds]
          GroupSet: [!Ref JenkinsMasterSecurityGroup]
      ImageId: !Ref LinuxAmi
      InstanceType: !Ref MasterInstanceType
      UserData: !Base64 |
        #!/bin/bash -ex
        yum update -y
        yum install -y git
        amazon-linux-extras install -y ansible2

        ansible-pull \
          -o -C main -U git://github.com/mcastellin/ansible-playbooks \
          --connection=local \
          --inventory 127.0.0.1, \
          jenkins/cloud-init/master/playbook.yaml
      Tags:
        - Key: Name
          Value: Jenkins-Master

Outputs:
  MasterPublicIp:
    Description: The public ip of the Jenkins master instance, if assigned.
    Value: !If
      - PublicIpAssigned
      - !GetAtt JenkinsMasterInstance.PublicIp
      - "-"
  MasterPrivateIp:
    Description: The private ip addr of the Jenkins master node
    Value: !GetAtt JenkinsMasterInstance.PrivateIp

  WorkersSecGroupId:
    Condition: CreateWorkersSecGroup
    Value: !GetAtt JenkinsWorkersSecGroup.GroupId
